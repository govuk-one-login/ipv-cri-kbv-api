plugins {
	alias(libs.plugins.java)
	alias(libs.plugins.sonarqube)
	alias(libs.plugins.spotless)
}

defaultTasks 'clean', 'spotlessApply', 'build'

repositories {
	maven {
		url 'https://gds.jfrog.io/artifactory/di-allowed-repos'
	}
}

subprojects {
	apply plugin: 'java'

	java {
		sourceCompatibility = JavaVersion.VERSION_17
		targetCompatibility = JavaVersion.VERSION_17
	}

	repositories {
		maven {
			url 'https://gds.jfrog.io/artifactory/di-allowed-repos'
		}
	}

	// https://aws.amazon.com/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/
	configurations.configureEach {
		exclude group:"software.amazon.awssdk", module: "apache-client"
		exclude group:"software.amazon.awssdk", module: "netty-nio-client"
		exclude group:"software.amazon.awssdk", module: "url-connection-client"
	}

	dependencies {
		implementation(platform(libs.aws.sdk.bom))
		implementation(libs.aws.crt.client)
		runtimeOnly(libs.log4j.lambda)

		implementation(libs.aspectjrt)
	}

	test {
		// Configures environment variable to avoid initialization of AWS X-Ray segments for each tests
		environment "LAMBDA_TASK_ROOT", "handler"
		filter {
			excludeTestsMatching "uk.gov.di.ipv.cri.kbv.acceptancetest.journey.*"
		}
	}

	tasks.register("pactTests", Test) {
		useJUnitPlatform {
			includeTags 'Pact'
		}
	}

	tasks.matching { it.name == "jacocoTestReport" }.configureEach {
		dependsOn test
		reports {
			xml.required.set(true)
		}
	}

	test {
		useJUnitPlatform ()
		finalizedBy(tasks.matching { it.name == 'jacocoTestReport' })
	}
}

sonar {
	properties {
		property "sonar.projectKey", "ipv-cri-kbv-api"
		property "sonar.organization", "govuk-one-login"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

spotless {
	java {
		target "**/src/**/*.java"
		googleJavaFormat("1.17.0").aosp()
		importOrder "", "javax", "java", "\\#"
		endWithNewline()
	}
	groovyGradle {
		target '**/*.gradle'
		greclipse()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

clean.doFirst {
	delete "${rootDir}/dist/"
	delete "${rootDir}/.aws-sam"
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile).tap {
		configureEach {
			options.compilerArgs << "-Xlint:unchecked"
		}
	}
}

tasks.build {
	dependsOn("spotlessApply")
}
