{
  "Comment": "Fix session items that have an invalid TTL",
  "StartAt": "Does input contain LastEvaluatedKey?",
  "States": {
    "Does input contain LastEvaluatedKey?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.LastEvaluatedKey",
          "IsPresent": false,
          "Next": "Scan for expiryDate of 7200 without LastEvaluatedKey"
        }
      ],
      "Default": "Scan for expiryDate of 7200 with LastEvaluatedKey"
    },
    "Scan for expiryDate of 7200 without LastEvaluatedKey": {
      "Type": "Task",
      "Parameters": {
        "TableName": "${SessionTable}",
        "FilterExpression": "expiryDate = :expiryDate",
        "ExpressionAttributeValues": {
          ":expiryDate": {
            "N": "7200"
          }
        },
        "Limit": 100
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:scan",
      "Next": "Create counter to track updates",
      "ResultPath": "$.scan"
    },
    "Create counter to track updates": {
      "Type": "Pass",
      "Next": "Are there any records?",
      "Parameters": {
        "value": 0
      },
      "ResultPath": "$.counter"
    },
    "Scan for expiryDate of 7200 with LastEvaluatedKey": {
      "Type": "Task",
      "Parameters": {
        "TableName": "${SessionTable}",
        "FilterExpression": "expiryDate = :expiryDate",
        "ExpressionAttributeValues": {
          ":expiryDate": {
            "N": "7200"
          }
        },
        "ExclusiveStartKey": {
          "sessionId": {
            "S.$": "$.LastEvaluatedKey"
          }
        },
        "Limit": 200
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:scan",
      "ResultPath": "$.scan",
      "Next": "Create counter to track updates (1)"
    },
    "Create counter to track updates (1)": {
      "Type": "Pass",
      "Next": "Are there any records?",
      "Parameters": {
        "value.$": "$.Processed_Records"
      },
      "ResultPath": "$.counter"
    },
    "Are there any records?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.scan.Count",
          "NumericGreaterThan": 0,
          "Next": "Loop over each item"
        }
      ],
      "Default": "Total records processed"
    },
    "Loop over each item": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Fetch current epoch time",
        "States": {
          "Fetch current epoch time": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "${TimeFunction}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "ResultPath": "$.timeFunction",
            "Next": "Update expiryDate"
          },
          "Update expiryDate": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "Parameters": {
              "TableName": "${SessionTable}",
              "Key": {
                "sessionId": {
                  "S.$": "$.sessionId.S"
                }
              },
              "UpdateExpression": "SET expiryDate = :expiryDate",
              "ExpressionAttributeValues": {
                ":expiryDate": {
                  "N.$": "States.JsonToString($.timeFunction.Payload)"
                }
              }
            },
            "End": true
          }
        }
      },
      "ItemsPath": "$.scan.Items",
      "ResultPath": null,
      "Next": "Is the LastEvaluatedKey present?"
    },
    "Is the LastEvaluatedKey present?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.scan.LastEvaluatedKey.sessionId.S",
          "IsPresent": true,
          "Next": "Pause for 1 second"
        }
      ],
      "Default": "Total records processed"
    },
    "Total records processed": {
      "Type": "Pass",
      "Next": "Success",
      "Parameters": {
        "Total Records Updated.$": "States.MathAdd($.counter.value, $.scan.Count)"
      }
    },
    "Pause for 1 second": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SleepFunction}",
        "Payload": {
          "ms": "1000"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Re-run this state machine",
      "ResultPath": null
    },
    "Re-run this state machine": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution",
      "Parameters": {
        "StateMachineArn": "${StateMachineArn}",
        "Input": {
          "LastEvaluatedKey.$": "$.scan.LastEvaluatedKey.sessionId.S",
          "Processed_Records.$": "States.MathAdd($.counter.value, $.scan.Count)"
        }
      },
      "End": true
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}